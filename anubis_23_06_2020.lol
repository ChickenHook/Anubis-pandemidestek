\contentsline {lstlisting}{\numberline {1}Example output of the API usage script.}{4}
\contentsline {lstlisting}{\numberline {2}Permissions defined in the Manifest of the malware}{5}
\contentsline {lstlisting}{\numberline {3}Intent filter actions defined in the \textit {AndroidManifest.xml}}{6}
\contentsline {lstlisting}{\numberline {4}Sdk version configuration defined in the \textit {AndroidManifest.xml}}{6}
\contentsline {lstlisting}{\numberline {5}The content of \textit {SharedPreference} file \textbf {shared\_prefs/set.xml}.}{8}
\contentsline {lstlisting}{\numberline {6}The function \textit {naqsl.ebxcb.exu.ifdf.ifdf()} deobfuscates the default URLs.}{9}
\contentsline {lstlisting}{\numberline {7}The function \textit {naqsl.ebxcb.exu.Cint.int()} deobfuscates the given string using the \textit {android.util.Base64.decode()} function.}{11}
\contentsline {lstlisting}{\numberline {8}\textit {MainActivity.onCreate} calls \textit {setComponentEnabledSetting} with \textit {COMPONENT\_ENABLED\_STATE\_DISABLED} parameter in order to let the App icon disappear in the launcher.}{11}
\contentsline {lstlisting}{\numberline {9}List of calls to \textit {android.media.projection.MediaProjectionManager.createScreenCaptureIntent} tells that the malware tries to do screenshots.}{12}
\contentsline {lstlisting}{\numberline {10}The malware stores the screenshot into the external files dir with filename \textbf {screenshot.jpg}.}{12}
\contentsline {lstlisting}{\numberline {11}The function \textit {naqsl.ebxcb.exu.API.Screenshot.ServiceSendRequestImageVNC.onHandleIntent} writes the file to disk as well as invokes the \textit {naqsl.ebxcb.exu.Cint.fddo()} function which is intended to send the data to a Web server.}{12}
\contentsline {lstlisting}{\numberline {12}The function \textit {naqsl.ebxcb.exu.Cint.fddo()} sends the screenshot to a Web server.}{13}
\contentsline {lstlisting}{\numberline {13}Function \textit {naqsl.ebxcb.exu.Activity.ActivityGetSMS.fddo} builds the target url and calls the \textit {intR.fddo()} function which initiates the data upload.}{15}
\contentsline {lstlisting}{\numberline {14}List of API calls to \textit {android.telephony.SmsManager} showing that the malware create messages and sends them via the \textit {android.telephony.SmsManager.sendMultipartTextMessage} call.}{16}
\contentsline {lstlisting}{\numberline {15}The function \textit {naqsl.ebxcb.exu.Activity.ActivityGetNumber.fddo(ContentResolver contentResolver, String)} queries the list of phone numbers stored in the device address book and forwards each entry \textit {naqsl.ebxcb.exu.Cint.m447int(Context context, String str, String str2)} function.}{16}
\contentsline {lstlisting}{\numberline {16}The function \textit {naqsl.ebxcb.exu.Cint.m447int(Context context, String str, String str2)} prepares a mulipart message and sends it to a new victim.}{16}
\contentsline {lstlisting}{\numberline {17}The \textit {naqsl.ebxcb.exu.Activity.ActivityPlayProtect.onCreate} function is intended to open the Google Play Protect screen so that the user or the Accessibility Service of the malware is potentially able to disable the protection from Google.}{18}
\contentsline {lstlisting}{\numberline {18}The function \textit {naqsl.ebxcb.exu.ServiceAccessibility.onAccessibilityEvent()} finalizes the last step of the disable Google Play Protect attack using the \textit {android.view.accessibility.AccessibilityNodeInfo.performAction()} function. Afterwards the settings will be closed by calling the \textit {naqsl.ebxcb.exu.ServiceAccessibility.fddo()} function.}{18}
\contentsline {lstlisting}{\numberline {19}List of calls to the Accessibility framework of Android. The malware is searching for UI widgets as well as performs global actions (can dismiss Activities like Settings) and gather text entered into UI widgets.}{19}
\contentsline {lstlisting}{\numberline {20}The \textit {AccessiblityService} is able to detect wether a user is trying to enable Google Play Protect and leaves the screen using the \textit {naqsl.ebxcb.exu.ServiceAccessibility.fddo()} function.}{21}
\contentsline {lstlisting}{\numberline {21}The function \textit {naqsl.ebxcb.exu.ServiceAccessibility.fddo()} presses three times back and then leaves the current App or calls \textit {android.app.Activity.startActivity()} using the Launcher intent in order to bring the Launcher on top of the screen.}{21}
\contentsline {lstlisting}{\numberline {22}The Service \textit {naqsl.ebxcb.exu.StartWhileRequest} starts the \textit {naqsl.ebxcb.exu.Activity.ActivityAccessibility} frequently in a loop till the Accessibility permission was granted.}{22}
\contentsline {lstlisting}{\numberline {23}The function \textit {naqsl.ebxcb.exu.Activity.ActivityAccessibility.onCreate() just launches the Activity associated with \textbf {android.settings.ACCESSIBILITY\_SETTINGS}}}{22}
\contentsline {lstlisting}{\numberline {24}The \textit {onLocationChanged} function calls ifdf which is intended to send the data to a Web server.}{23}
\contentsline {lstlisting}{\numberline {25}The function ifdf encodes the location information to a \textit {String} and passes it as argument to the function \textit {naqsl.ebxcb.exu.Cint.fddo(Context context, String str, String str2)}}{23}
\contentsline {lstlisting}{\numberline {26}\textit {naqsl.ebxcb.exu.ServiceCommands.fddo()} searches for some hardcoded strings matching to the device language and starts the \textit {naqsl.ebxcb.exu.ServiceModuleNotification} Service by calling the \textit {android.app.Context.startService()} method.}{24}
\contentsline {lstlisting}{\numberline {27}\textit {naqsl.ebxcb.exu.ServiceModuleNotification.onHandleIntent()} collects necessary strings from the intent extras as well as the target url using the \textit {f586fddo.fddo()} (f586fddo is a member of type \textit {naqsl.ebxcb.exu.Cint}) function. Then it executes the Async task \textit {naqsl.ebxcb.exu.ServiceModuleNotification.fddo}.}{25}
\contentsline {lstlisting}{\numberline {28}The function textit{naqsl.ebxcb.exu.Cint.fddo()} reads the url of the Web resource from the shared preferences using the \textit {android.app.Context.getSharedPreferences} function.}{25}
\contentsline {lstlisting}{\numberline {29}The function textit{naqsl.ebxcb.exu.ServiceModuleNotification.doInBackground} fetches the Web resource and decodes it as bitmap.}{25}
\contentsline {lstlisting}{\numberline {30}The onPostExecute function spawns a notification with a cusom icon and the \textit {naqsl/ebxcb.exu.Activity.ActivityPushInjection} activity as PendingIntent by calling the \textit {android.app.NotificationManager.notify} function.}{26}
\contentsline {lstlisting}{\numberline {31}The \textit {naqsl.ebxcb.exu.Activity.ActivityPushInjection.center} function initializes a webview pointing to an url loaded from the shared preferences.}{27}
\contentsline {lstlisting}{\numberline {32}The function \textit {naqsl.ebxcb.exu.ServiceInjections.ifdf()} searches for running Apps using the API functions \textit {android.app.ActivityManager.getRunningTasks()} \cite {AndroidDev} and \textit {android.app.ActivityManager.getRunningAppProcesses()} \cite {AndroidDev} which are deprecated since Android 5.}{28}
\contentsline {lstlisting}{\numberline {33}The function \textit {naqsl.ebxcb.exu.ServiceInjections.fddo()} verifies if current foreground task matches to a value stored in \textit {SharedPreferences} \textbf {name} tag and launches the Activity \textit {naqsl.ebxcb.exu.Activity.ActivityInjection} if neccessary.}{28}
\contentsline {lstlisting}{\numberline {34}The Activity \textit {naqsl.ebxcb.exu.Activity.ActivityInjection} shows a webview which allows to show dynamic content for phishing credentials or other sensitive information.}{29}
\contentsline {lstlisting}{\numberline {35}The function \textit {naqsl.ebxcb.exu.ServiceAccessibility\$fddo.run()} launches the \textit {naqsl.ebxcb.exu.Activity.ActivityInjection} if a known App is on top of the screen.}{29}
\contentsline {lstlisting}{\numberline {36}The function \textit {naqsl.ebxcb.exu.Activity.ActivityStartUSSD.onCreate()} starts an \textbf {android.intent.action.CALL} intent in order to execute an USSD code.}{29}
\contentsline {lstlisting}{\numberline {37}The malware is using \textit {dalvik.system.DexClassLoader} and is able to load code at runtime for example from a Web resource.}{31}
